code_n_ind <- 0
} else { #Noise
if (label_parts[1] %in% c("Non", "Bug")) { # Non identifiÃ© ou Bug informatique
label <- paste(label_parts[1], label_parts[2])
} else {
label <- label_parts[1]
}
sound_type <- "Noise"
confidence_level <- 1
code_n_ind <- 0
}
if (frequencies_annotated) {
min_frequency <- gsub(".*\t(.+)\t.*", "\\1", line2)
max_frequency <- sub(".*\t", "", line2)
} else {
min_frequency <- NA
max_frequency <- NA
}
annotations <- rbind(annotations, c(recording_id, label, sound_type, initial_time, final_time, min_frequency, max_frequency, confidence_level, vocalization_type, code_n_ind))
}
close(conn)
}
colnames(annotations) <- c("recording_id", "label", "sound_type", "initial_time", "final_time", "min_frequency", "max_frequency", "confidence_level", "vocalization_type", "code_n_ind")
annotations <- annotations %>%
mutate(recording_id = as.numeric(recording_id),
initial_time = as.double(initial_time),
final_time = as.double(final_time),
min_frequency = as.double(min_frequency),
max_frequency = as.double(max_frequency),
confidence_level = as.integer(confidence_level),
code_n_ind = as.integer(code_n_ind))
annotations <- annotations %>%
mutate(species = case_when(sound_type == "Animal" ~ label,
TRUE ~ "-"))
annotations$file=gsub(".txt","",basename(files)[annotations$recording_id])
print(unique(annotations$file))
annotationsI1=subset(annotations
,substr(as.character(annotations$label)
,nchar(as.character(annotations$label))-2
,nchar(as.character(annotations$label)))==" sp")
table(annotationsI1$label)
annotationsI2=subset(annotations,grepl("termin",annotations$label))
table(annotationsI2$label)
annotationsI2=subset(annotationsI2,grepl("nd",annotationsI2$label))
table(annotationsI2$label)
annotationsI3=subset(annotations,annotations$confidence_level==0)
table(annotationsI3$label)
annotationsI4=subset(annotations,grepl("on identif",annotations$label))
table(annotationsI4$label)
DirToBeChecked=paste0(Dir,"/ToBeChecked")
dir.create(DirToBeChecked)
annotationsI=rbind(annotationsI1,annotationsI2,annotationsI3,annotationsI4)
annotationsI=annotationsI[order(annotationsI$file,annotationsI$initial_time),]
annotationsIbackup=annotationsI
ChunkFile=vector()
TimeChunk=vector()
j=0
while(nrow(annotationsI)>0){
j=j+1
#for (i in 1:nrow(annotationsI))
filet=annotationsI$file[1]
print(filet)
#print(annotationsI$label[1])
#print(annotationsI$initial_time[1])
print(nrow(annotationsI))
print(length(ChunkFile))
fileW=list.files(Dir,pattern=paste0(filet,".wav"),recursive=T,full.names=T)
fileW=fileW[order(nchar(fileW))][1]
#if(length(fileW)!=1){stop("file missing or doublon")}
Wt=readWave(fileW)
DurWt=length(Wt@left)/Wt@samp.rate
annotationsSel=annotationsI[1,]
if(nrow(annotationsI)>1){
Tdiff=annotationsI$initial_time[2]-annotationsI$final_time[1]
if(annotationsI$file[1]!=annotationsI$file[2]){Tdiff=9999}
annotationsI=annotationsI[-1,]
while(Tdiff<10){
#stop()
if(nrow(annotationsI)>1){
Tdiff=annotationsI$initial_time[2]-annotationsI$final_time[1]
if(annotationsI$file[1]!=annotationsI$file[2]){Tdiff=9999}
}else{
Tdiff=999
}
annotationsSel=rbind(annotationsSel,annotationsI[1,])
annotationsI=annotationsI[-1,]
}
}else{
annotationsI=annotationsI[-1,]
}
ChunkDebut=max(0,min(annotationsSel$initial_time)-PrePostTrigger)
ChunkFin=min(DurWt,max(annotationsSel$final_time)+PrePostTrigger)
TimeChunk=c(TimeChunk,rep(ChunkDebut,nrow(annotationsSel)))
Wc=cutw(Wt,from=ChunkDebut,to=ChunkFin,output="Wave")
ChunkFilej=paste0(DirToBeChecked,"/",Sys.Date(),"_",j,".wav")
writeWave(Wc,filename=ChunkFilej,extensible=F) #ecrit le nouveau fichier wave
ChunkFile=c(ChunkFile,rep(basename(ChunkFilej),nrow(annotationsSel)))
#recompute time windows for the new file
annotationsSel$initial_time=annotationsSel$initial_time-ChunkDebut
annotationsSel$final_time=annotationsSel$final_time-ChunkDebut
annotationsSelAu=subset(annotationsSel,select=c("label","initial_time"
,"final_time","min_frequency"
,"max_frequency"))
#annotationsSelAu$min_frequency=round(annotationsSelAu$min_frequency)
#annotationsSelAu$max_frequency=round(annotationsSelAu$max_frequency)
names(annotationsSelAu)=c("label","t1","t2","f1","f2")
write.audacity(annotationsSelAu,gsub(".wav",".txt",ChunkFilej))
}
annotationsIbackup$fileNew=ChunkFile
annotationsIbackup$debut_origine=TimeChunk
#Writing local CSV file
annotations_file_name <- file.path(paste0(Dir, "/annotationsToBeChecked.csv"))
write.csv(x=annotationsIbackup, file=annotations_file_name, row.names = FALSE)
library(mongolite)
library(data.table)
#library(beepr)
library(lubridate)
mongo=fread("C:/Users/yvesb/Documents/Tadarida/Vigie-Chiro_scripts/Vigie-Chiro_scripts/mongos.txt"
,sep="$",h=F)
test=F #T si base de test, F si base de prod
FLabels="C:/Users/yvesb/Documents/Tadarida/Elodie/Fevrier2023_2/annotationsToBeChecked.csv"
Labels=fread(FLabels)
if(test){
connection_string=mongo$V1[2]
}else{
connection_string=mongo$V1[1]
}
sites = mongo(collection="sites", db="vigiechiro", url=connection_string)
sites = mongo(collection="sites", db="vigiechiro", url=connection_string)
#participations = mongo(collection="participations", db="vigiechiro", url=connection_string)
#users = mongo(collection="utilisateurs", db="vigiechiro", url=connection_string)
#listpart=fread("ccsps220906.csv")
#test=participations$export()
listpart=NA
#users = mongo(collection="utilisateurs", db="vigiechiro", url=connection_string)
NbJourEC=4
Sys.time()
#alldatapart<-participations$find(fields='{}')
Sys.time()
alldatasites <- sites$find(fields='{}')
Sys.time() #~1sec / 1e3 sites
#alldataobs <- users$find(fields='{}')
Sys.time()
Labels$coordonnees=""
Labels$date=""
Labels$heure=""
for (i in 1:nrow(Labels)){
NumCi=substr(Labels$file[i],4,9)
sitesi=subset(alldatasites
,alldatasites$titre==paste0("Vigiechiro - Point Fixe-"
,NumCi))
pointi=tstrsplit(Labels$file[i],split="-")[[4]]
coordonneesi=subset(sitesi$localites[[1]]$geometries,sitesi$localites[[1]]$nom==pointi)
if(nrow(coordonneesi)==1){
Labels$coordonnees[i]=paste0(coordonneesi$geometries[[1]]$coordinates[[1]][1]
,",",coordonneesi$geometries[[1]]$coordinates[[1]][2])
}
Infoi=tstrsplit(Labels$file[i],split="_")
Date0=Infoi[[length(Infoi)-2]]
Datei=ymd(substr(Date0,nchar(Date0)-7,nchar(Date0)))
#print(Datei)
Labels$date[i]=Datei
Heure0=Infoi[[length(Infoi)-1]]
heurei=paste0(substr(Heure0,1,2),":",substr(Heure0,3,4))
Labels$heure[i]=heurei
}
i
NumCi=substr(Labels$file[i],4,9)
NumCi
Labels$file[i]
Labels$coordonnees=""
Labels$date=""
Labels$heure=""
for (i in 1:nrow(Labels)){
if(substr(Labels$file[i],1,3)=="Car"){
NumCi=substr(Labels$file[i],4,9)
sitesi=subset(alldatasites
,alldatasites$titre==paste0("Vigiechiro - Point Fixe-"
,NumCi))
pointi=tstrsplit(Labels$file[i],split="-")[[4]]
coordonneesi=subset(sitesi$localites[[1]]$geometries,sitesi$localites[[1]]$nom==pointi)
if(nrow(coordonneesi)==1){
Labels$coordonnees[i]=paste0(coordonneesi$geometries[[1]]$coordinates[[1]][1]
,",",coordonneesi$geometries[[1]]$coordinates[[1]][2])
}
}
Infoi=tstrsplit(Labels$file[i],split="_")
Date0=Infoi[[length(Infoi)-2]]
Datei=ymd(substr(Date0,nchar(Date0)-7,nchar(Date0)))
#print(Datei)
Labels$date[i]=Datei
Heure0=Infoi[[length(Infoi)-1]]
heurei=paste0(substr(Heure0,1,2),":",substr(Heure0,3,4))
Labels$heure[i]=heurei
}
Infoi
Labels$file[i]
Date0=Infoi[[length(Infoi)]]
Datei=ymd(substr(Date0,nchar(Date0)-7,nchar(Date0)))
Datei
#print(Datei)
Labels$date[i]=Datei
Labels$date[i]
length(Infoi)
Labels$coordonnees=""
Labels$date=""
Labels$heure=""
for (i in 1:nrow(Labels)){
if(substr(Labels$file[i],1,3)=="Car"){
NumCi=substr(Labels$file[i],4,9)
sitesi=subset(alldatasites
,alldatasites$titre==paste0("Vigiechiro - Point Fixe-"
,NumCi))
pointi=tstrsplit(Labels$file[i],split="-")[[4]]
coordonneesi=subset(sitesi$localites[[1]]$geometries,sitesi$localites[[1]]$nom==pointi)
if(nrow(coordonneesi)==1){
Labels$coordonnees[i]=paste0(coordonneesi$geometries[[1]]$coordinates[[1]][1]
,",",coordonneesi$geometries[[1]]$coordinates[[1]][2])
}
Infoi=tstrsplit(Labels$file[i],split="_")
Date0=Infoi[[length(Infoi)-2]]
Datei=ymd(substr(Date0,nchar(Date0)-7,nchar(Date0)))
#print(Datei)
Labels$date[i]=Datei
Heure0=Infoi[[length(Infoi)-1]]
heurei=paste0(substr(Heure0,1,2),":",substr(Heure0,3,4))
Labels$heure[i]=heurei
}else{
Infoi=tstrsplit(Labels$file[i],split="_")
Date0=Infoi[[length(Infoi)]]
Datei=ymd(substr(Date0,nchar(Date0)-7,nchar(Date0)))
#print(Datei)
Labels$date[i]=Datei
Labels$heure[i]=""
Labels$coordonnees[i]=""
}
}
Labels$nom_fichier=Labels$fileNew
Labels$identification_origine=Labels$label
#Labels$'identification_expert-e'=""
#Labels$'confiance_expert-e'=""
Labels$'avis_expert-e1'=""
Labels$'avis_expert-e2'=""
Labels$'avis_expert-e3'=""
# Labels$temps_debut=round(Labels$initial_time,1)
# Labels$temps_fin=round(Labels$final_time,1)
# Labels$freq_min=round(Labels$min_frequency)
# Labels$freq_max=round(Labels$max_frequency)
Labels$temps_debut=Labels$initial_time-Labels$debut_origine
Labels$temps_fin=Labels$final_time-Labels$debut_origine
Labels$freq_min=Labels$min_frequency
Labels$freq_max=Labels$max_frequency
#coord
Labels$date=as.Date(as.numeric(Labels$date),origin="1970-01-01")
#heure
Labels$fichier_origine=Labels$file
LabelsToBeChecked=subset(Labels,select=c("nom_fichier","identification_origine"
,"avis_expert-e1","avis_expert-e2","avis_expert-e3"
,"temps_debut","temps_fin","freq_min","freq_max"
,"coordonnees","date","heure","fichier_origine"
,"debut_origine"))
annotationsI_prioritized=LabelsToBeChecked
annotations_types=unique(data.table(cbind(annotationsI_prioritized$fichier_origine
,annotationsI_prioritized$identification_origine)))
annotationsI_prioritized$prioritaire=""
LabelsPrioritized=annotationsI_prioritized[0,]
for (i in 1:nrow(annotations_types)){
ai=subset(annotationsI_prioritized
,(annotationsI_prioritized$fichier_origine==annotations_types$V1[i])
&(annotationsI_prioritized$identification_origine==annotations_types$V2[i]))
# if(nrow(ai)>1){
duree=ai$temps_fin-ai$temps_debut
ai=ai[order(duree,decreasing=T),]
ai$prioritaire=c("oui",rep("non",nrow(ai)-1))
# aimax=ai[1,]
# aimax$prioritaire="oui"
# Fminj=aimax$freq_min
# Fmaxj=aimax$freq_max
#
#ai_others=subset(ai,duree<max(duree))
# }else{
#stop()
LabelsPrioritized=rbind(LabelsPrioritized,ai)
#
}
table(LabelsPrioritized$prioritaire)
fwrite(LabelsPrioritized,paste0(dirname(FLabels),"/PourValidation",Sys.Date(),".csv"),sep=";")
test=fread(file.choose())
test2=fread(file.choose())
table(test2$Espece)
table(test$Espece)
length(table(test$Espece))
length(table(test2$Espece))
testvide=subset(test,test$Espece=="")
testvide=subset(test2,test2$Espece=="")
testvide=subset(test2,test2$Espece=="noise")
testvide=subset(test,test$Espece=="noise")
testvide=subset(test,test$Espece=="Pippip")
testvide=subset(test2,test2$Espece=="Pippip")
testvide=subset(test,test$Espece=="Pippip")
##### part of this script from DAVID FUNOSAS, thanks to him!! #####
library(dplyr)
library(seewave)
library(tuneR)
Dir= "C:/Users/yvesb/Documents/Tadarida/Elodie/Fevrier2023_3"
PrePostTrigger=3 #nombre de secondes Ã  ajouter aux chuncks avant-aprÃ¨s
can_convert_to_numeric <- function(x) {
all(grepl('^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$', x, perl = TRUE))
}
annotations <- data.frame()
files=list.files(Dir,full.names=T,pattern=".txt$",recursive=T)
files=subset(files,!grepl("BirdNET.results",basename(files)))
files=subset(files,!basename(dirname(files))=="ToBeChecked")
filesCorr=subset(files,basename(dirname(files))=="corrections")
#replace files by their possible corrected version
files=subset(files,!(basename(files) %in% basename(filesCorr)))
files=c(files,filesCorr)
n_files <- length(files)
for (j in 1:n_files) {
print(paste0("Processing annotation file ", as.character(j), " out of ", as.character(n_files)))
file_name <- files[j]
conn <- file(file_name, open="r")
linn <-readLines(conn)
# Min and max frequencies are not specified in the two mentioned data sets
frequencies_annotated <- !(grepl("Juan GÃ³mez-GÃ³mez - Ester VidaÃ±a-Vila - Xavier Sevillano", file_name, fixed = TRUE) |
grepl("NIPS4Bplus - Veronica Morfi + Dan Stowell + Hanna Pamula", file_name, fixed = TRUE))
if (frequencies_annotated) {
index_list <- seq(1, length(linn), 2)
} else {
index_list <- seq(1, length(linn), 1)
}
for (i in index_list){
line1 <- linn[i]
line2 <- linn[i+1]
recording_id <- j
initial_time <- sub("\t.*", "", line1)
final_time <- gsub(".*\t(.+)\t.*", "\\1", line1)
vocalization_type <- "-"
label_parts <- strsplit(sub(".*\t", "", line1), split = " ")[[1]]
if (length(label_parts) == 4) { #Wild species
label <- paste(label_parts[1], label_parts[2])
sound_type <- "Animal"
confidence_level <- label_parts[3]
code_n_ind <- label_parts[4]
} else if (length(label_parts) == 5) { #Bird or calling frog
label <- paste(label_parts[1], label_parts[2])
sound_type <- "Animal"
if (can_convert_to_numeric(label_parts[3])) { #Bird
confidence_level <- label_parts[3]
vocalization_type <- case_when(label_parts[4] == "0" ~ "Unknown",
label_parts[4] == "1" ~ "Song",
label_parts[4] == "2" ~ "Call",
label_parts[4] == "3" ~ "Flight call",
label_parts[4] == "4" ~ "Drumming",
label_parts[4] == "5" ~ "Flapping",
TRUE ~ "-")
label <- case_when(label == "Sylvia melanocephala" ~ "Curruca melanocephala",
label == "Sylvia undata" ~ "Curruca undata",
label == "Sylvia communis" ~ "Curruca communis",
label == "Regulus ignicapillus" ~ "Regulus ignicapilla",
label == "lullula arborea" ~ "Lullula arborea",
label == "Dendrocopos minor" ~ "Dryobates minor",
TRUE ~ label)
} else { #Frog
confidence_level <- label_parts[4]
vocalization_type <- "-"
}
code_n_ind <- label_parts[5]
}  else if (length(label_parts) == 2) { #Domestic species
label <- paste(label_parts[1], label_parts[2])
sound_type <- case_when(!(label %in% c("Non identifie", "Non identifiÃ©", "Bug informatique", "DÃ©placement animal")) ~ "Domestic animal",
TRUE ~ "Noise")
confidence_level <- 1
code_n_ind <- 0
} else { #Noise
if (label_parts[1] %in% c("Non", "Bug")) { # Non identifiÃ© ou Bug informatique
label <- paste(label_parts[1], label_parts[2])
} else {
label <- label_parts[1]
}
sound_type <- "Noise"
confidence_level <- 1
code_n_ind <- 0
}
if (frequencies_annotated) {
min_frequency <- gsub(".*\t(.+)\t.*", "\\1", line2)
max_frequency <- sub(".*\t", "", line2)
} else {
min_frequency <- NA
max_frequency <- NA
}
annotations <- rbind(annotations, c(recording_id, label, sound_type, initial_time, final_time, min_frequency, max_frequency, confidence_level, vocalization_type, code_n_ind))
}
close(conn)
}
colnames(annotations) <- c("recording_id", "label", "sound_type", "initial_time", "final_time", "min_frequency", "max_frequency", "confidence_level", "vocalization_type", "code_n_ind")
annotations <- annotations %>%
mutate(recording_id = as.numeric(recording_id),
initial_time = as.double(initial_time),
final_time = as.double(final_time),
min_frequency = as.double(min_frequency),
max_frequency = as.double(max_frequency),
confidence_level = as.integer(confidence_level),
code_n_ind = as.integer(code_n_ind))
annotations <- annotations %>%
mutate(species = case_when(sound_type == "Animal" ~ label,
TRUE ~ "-"))
annotations$file=gsub(".txt","",basename(files)[annotations$recording_id])
print(unique(annotations$file))
annotationsI1=subset(annotations
,substr(as.character(annotations$label)
,nchar(as.character(annotations$label))-2
,nchar(as.character(annotations$label)))==" sp")
table(annotationsI1$label)
annotationsI2=subset(annotations,grepl("termin",annotations$label))
table(annotationsI2$label)
annotationsI2=subset(annotationsI2,grepl("nd",annotationsI2$label))
table(annotationsI2$label)
annotationsI3=subset(annotations,annotations$confidence_level==0)
table(annotationsI3$label)
annotationsI4=subset(annotations,grepl("on identif",annotations$label))
table(annotationsI4$label)
DirToBeChecked=paste0(Dir,"/ToBeChecked")
dir.create(DirToBeChecked)
annotationsI=rbind(annotationsI1,annotationsI2,annotationsI3,annotationsI4)
annotationsI=annotationsI[order(annotationsI$file,annotationsI$initial_time),]
annotationsIbackup=annotationsI
ChunkFile=vector()
TimeChunk=vector()
j=0
while(nrow(annotationsI)>0){
j=j+1
#for (i in 1:nrow(annotationsI))
filet=annotationsI$file[1]
print(filet)
#print(annotationsI$label[1])
#print(annotationsI$initial_time[1])
print(nrow(annotationsI))
print(length(ChunkFile))
fileW=list.files(Dir,pattern=paste0(filet,".wav"),recursive=T,full.names=T)
fileW=fileW[order(nchar(fileW))][1]
#if(length(fileW)!=1){stop("file missing or doublon")}
Wt=readWave(fileW)
DurWt=length(Wt@left)/Wt@samp.rate
annotationsSel=annotationsI[1,]
if(nrow(annotationsI)>1){
Tdiff=annotationsI$initial_time[2]-annotationsI$final_time[1]
if(annotationsI$file[1]!=annotationsI$file[2]){Tdiff=9999}
annotationsI=annotationsI[-1,]
while(Tdiff<10){
#stop()
if(nrow(annotationsI)>1){
Tdiff=annotationsI$initial_time[2]-annotationsI$final_time[1]
if(annotationsI$file[1]!=annotationsI$file[2]){Tdiff=9999}
}else{
Tdiff=999
}
annotationsSel=rbind(annotationsSel,annotationsI[1,])
annotationsI=annotationsI[-1,]
}
}else{
annotationsI=annotationsI[-1,]
}
ChunkDebut=max(0,min(annotationsSel$initial_time)-PrePostTrigger)
ChunkFin=min(DurWt,max(annotationsSel$final_time)+PrePostTrigger)
TimeChunk=c(TimeChunk,rep(ChunkDebut,nrow(annotationsSel)))
Wc=cutw(Wt,from=ChunkDebut,to=ChunkFin,output="Wave")
ChunkFilej=paste0(DirToBeChecked,"/",Sys.Date(),"_",j,".wav")
writeWave(Wc,filename=ChunkFilej,extensible=F) #ecrit le nouveau fichier wave
ChunkFile=c(ChunkFile,rep(basename(ChunkFilej),nrow(annotationsSel)))
#recompute time windows for the new file
annotationsSel$initial_time=annotationsSel$initial_time-ChunkDebut
annotationsSel$final_time=annotationsSel$final_time-ChunkDebut
annotationsSelAu=subset(annotationsSel,select=c("label","initial_time"
,"final_time","min_frequency"
,"max_frequency"))
#annotationsSelAu$min_frequency=round(annotationsSelAu$min_frequency)
#annotationsSelAu$max_frequency=round(annotationsSelAu$max_frequency)
names(annotationsSelAu)=c("label","t1","t2","f1","f2")
write.audacity(annotationsSelAu,gsub(".wav",".txt",ChunkFilej))
}
annotationsIbackup$fileNew=ChunkFile
annotationsIbackup$debut_origine=TimeChunk
#Writing local CSV file
annotations_file_name <- file.path(paste0(Dir, "/annotationsToBeChecked.csv"))
write.csv(x=annotationsIbackup, file=annotations_file_name, row.names = FALSE)
library(mongolite)
library(data.table)
#library(beepr)
library(lubridate)
mongo=fread("C:/Users/yvesb/Documents/Tadarida/Vigie-Chiro_scripts/Vigie-Chiro_scripts/mongos.txt"
,sep="$",h=F)
test=F #T si base de test, F si base de prod
FLabels="C:/Users/yvesb/Documents/Tadarida/Elodie/Fevrier2023_3/annotationsToBeChecked.csv"
Labels=fread(FLabels)
if(test){
connection_string=mongo$V1[2]
}else{
connection_string=mongo$V1[1]
}
sites = mongo(collection="sites", db="vigiechiro", url=connection_string)
#participations = mongo(collection="participations", db="vigiechiro", url=connection_string)
#users = mongo(collection="utilisateurs", db="vigiechiro", url=connection_string)
#listpart=fread("ccsps220906.csv")
#test=participations$export()
listpart=NA
#users = mongo(collection="utilisateurs", db="vigiechiro", url=connection_string)
NbJourEC=4
Sys.time()
#alldatapart<-participations$find(fields='{}')
Sys.time()
alldatasites <- sites$find(fields='{}')
